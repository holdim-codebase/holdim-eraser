// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @db.VarChar(255)

  createdAt    DateTime       @default(now())
  proposals    Proposal[]
  Daos         Dao[]
  Wallet       Wallet[]
  UserDaoEmoji UserProposalEmoji[]
}

model Wallet {
  id      Int     @id @default(autoincrement())
  userId  String
  address String
  ens     String? @db.VarChar(255)

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  WalletDaoFollow WalletDaoFollow[]

  @@unique([userId, address])
}

model Dao {
  id            Int    @id @default(autoincrement())
  snapshotId    String @unique
  name          String
  logo          String
  overview      String
  tokenOverview String

  createdAt       DateTime          @default(now())
  Proposal        Proposal[]
  Token           Token[]
  users           User[]
  WalletDaoFollow WalletDaoFollow[]
}

model Proposal {
  id                Int      @id @default(autoincrement())
  snapshotId        String   @unique
  title             String
  daoId             Int
  juniorDescription String?
  middleDescription String?
  seniorDescription String
  startAt           DateTime
  endAt             DateTime
  author            String
  snapshotLink      String
  discussionLink    String?
  issueNumber       Int?     @unique

  createdAt DateTime @default(now())
  dao       Dao      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.VarChar(255)
  UserProposalEmoji    UserProposalEmoji[]
}

model Token {
  id    String  @id @db.VarChar(255)
  name  String?
  dao   Dao     @relation(fields: [daoId], references: [id], onDelete: Cascade)
  daoId Int
  main  Boolean @default(false)

  createdAt DateTime @default(now())
}

model WalletDaoFollow {
  dao      Dao    @relation(fields: [daoId], references: [id], onDelete: Cascade)
  daoId    Int
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId Int

  createdAt DateTime @default(now())
  @@id([daoId, walletId])
}

model Emoji {
  id           Int            @id @default(autoincrement())
  url          String @unique
  unicode      String
  UserDaoEmoji UserProposalEmoji[]
}

model UserProposalEmoji {
  proposal     Proposal    @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId   Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  emojiId Int
  emoji   Emoji  @relation(fields: [emojiId], references: [id])

  createdAt DateTime @default(now())
  @@id([proposalId, userId])
}
